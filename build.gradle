plugins {
    id 'java'
    id 'scala'
    id 'maven-publish'
    id "com.diffplug.gradle.spotless" version "${spotlessPluginVersion}"
    id "com.github.maiflai.scalatest" version "${scalaTestPluginVersion}"
}

ext {
    projectVersion = "2.0.0-SNAPSHOT"
    scalaMinorVersion = computeScalaMinorVersion(scalaVersion)
    pegdown = "1.4.2"
    scalaTest = "3.0.9"
}

static def computeScalaMinorVersion(String scalaVersion) {
    String[] r = scalaVersion.split("\\.");
    return r.dropRight(1).join(".")
}

group 'com.cmhteixeira'
version "${projectVersion}"

sourceCompatibility = 1.8

buildDir = "build${computeScalaMinorVersion(scalaVersion).replace(".", "")}"

// Gradle adds this task which generates extra files on the publication.
// We are not interested in this.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

// Creates a jar with the output of the 'scalaDoc' task
task scaladocJar(type:Jar, dependsOn: scaladoc) {
    archiveClassifier = 'javadoc'
    from scaladoc.destinationDir
}

// Creates a jar with the source code
task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}


jar {
    archivesBaseName = "${project.name}_${computeScalaMinorVersion(scalaVersion)}"
}


publishing {
    publications {
        myStandardPublication(MavenPublication) {
            from components.java
            artifact scaladocJar  // Publication should include the scala docs
            artifact sourcesJar   // Publication should include the source code.

            groupId = "${project.group}"
            artifactId = "${project.name}_${computeScalaMinorVersion("$scalaVersion")}"
            version = "${projectVersion}"

            pom {
                url = "https://github.com/cmhteixeira/typed-list"
                developers {
                    developer {
                        id = "cmhteixeira"
                        name = "Carlos Teixeira"
                        email = "c.mh.teixeira@gmail.com"
                        url = "https://github.com/cmhteixeira"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/cmhteixeira/typed-list")
            credentials {
                username = System.getenv("GITHUB_USERNAME")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.create(name: "printScalaVersion") {
    description = "Prints to the console the scala version being used."
    doLast {
        println("Scala version is: ${scalaVersion}")
    }
}

for (coreTask in ["compileScala", "compileTestScala", "build", "test", "publish"]) {
    def allScalaVersions = ["2.11.12", "2.12.13", "2.13.5"]
    for (sv in allScalaVersions) {
        def minorVersion = computeScalaMinorVersion("$sv").replace(".", "")
        tasks.create(name: "${coreTask}${minorVersion}", type: GradleBuild) {
            description = "Runs the '${coreTask}' task with the scala version set to $sv (Minor version: ${computeScalaMinorVersion("$sv")})"
            buildFile = './build.gradle'
            startParameter.projectProperties = [scalaVersion: "${sv}"]
            tasks = ["printScalaVersion", "${coreTask}".toString()]
        }
    }
    def taskAcrossVersions = allScalaVersions.collect{sv -> "${coreTask}${computeScalaMinorVersion(sv).replace(".", "")}".toString()}
    tasks.create(name: "${coreTask}All", dependsOn: taskAcrossVersions) {
        description = "Runs tasks ${taskAcrossVersions.join(", ")}".toString()
    }
}

repositories {
    mavenCentral()
}

spotless {
    scala {
        scalafmt("2.3.2").configFile(".scalafmt.conf")
    }
}

dependencies {
    compile("org.scala-lang:scala-library:$scalaVersion")

    compile("org.scala-lang:scala-compiler:$scalaVersion")
    compile("org.scala-lang:scala-reflect:$scalaVersion")


    testCompile("org.scalatest:scalatest_$scalaMinorVersion:$scalaTest")
    testRuntime("org.pegdown:pegdown:$pegdown")
}